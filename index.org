#+TITLE: A template for Cinder projects
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../static/worg.css" />
#+options: num:nil
# This will export a README.org file for Github, so that people that land in my repo know where to find the relevant webpage
#+BEGIN_SRC org :tangle README.org :exports none
  see description [[http://geokon-gh.github.io/cinder-template/index.html][here]]
#+END_SRC

* TODO label what file the source block gets tangled to
* TODO export a README, but have it remain hidden (ie. not exported to the HTML)

* Intro

This is a simple template that uses ~CMake~ and ~gitsubmodules~. It's very easy to add additional CMake based libraries and Cinder-Blocks. I illustrate that by adding OpenCV and a couple of Cinder blocks

* Starting the base CMakeLists.txt
In around version 3 of CMake, the way we configure projects went through some fundamental changes, so most updated cmake projects start with a version requirement before declaring the name of the generated project
#+BEGIN_SRC cmake :tangle CMakeLists.txt
  cmake_minimum_required(VERSION 3.0)
  project(cinder-template)
#+END_SRC
Next I want the build system to export its compilation commands into the build directory. These are consumed by ~rtags~ and ~emacs~ to enable things like code-navigation/completion. (see my emacs configuration repository for more details on how that's used)
#+BEGIN_SRC cmake :tangle CMakeLists.txt
  set(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE BOOL "Export compile commands for Rtags")
#+END_SRC
Finally we need to bring in the 3rd party libraries through the gitsubmodule system. 3rd party libraries will be put into a separate folder (mine is ~contrib/~) and will get pulled in with git
#+BEGIN_SRC cmake :tangle CMakeLists.txt
  find_package(Git REQUIRED)
  add_subdirectory(contrib)
#+END_SRC
* The 3rd party libraries
Inside of ~contrib/~ we will have another ~CMakeLists.txt~ to manage the libraries we use. First it will pull in source code for the libraries through the gitsubmodule system.
#+BEGIN_SRC cmake :tangle contrib/CMakeLists.txt
  execute_process(COMMAND git submodule update --recursive --init -- Cinder
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
  execute_process(COMMAND git submodule update --recursive --init -- OpenCV
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
#+END_SRC
Unfortunately if you want to add additional submodules, it needs to be done by hand (either on the command line, or through something like ~magit~). There is a ~.gitmodules~ file in the repository's root directory - but just adding lines to it isn't sufficient to make git pull additional repositories

After that configure and add each library's directoy. Configuration (the equivalent to cmake command line arguments) is done by setting cache variable. The syntax unfortunately requires a comment line (maybe there is a way to eschew it.. but I haven't found it yet)
** OpenCV
For OpenCV I turn off generating any additional executables (for tests, examples and apps). In addition I turn off GUI related stuff (QT/GTK) and platform specific stuff. Building ~opencv_world~ is a matter of convenience. It makes it easier to link to all of OpenCV at once later in the configuration. You can instead link individually to the particular opencv libraries you use.
#+BEGIN_SRC cmake :tangle contrib/CMakeLists.txt
  set(ENABLE_PRECOMPILED_HEADERS OFF CACHE BOOL "OpenCV Option:")
  set(BUILD_EXAMPLES OFF CACHE BOOL "OpenCV Option:")
  set(BUILD_PERF_TESTS OFF CACHE BOOL "OpenCV Option:")
  set(BUILD_TESTS OFF CACHE BOOL "OpenCV Option:")
  set(BUILD_opencv_apps OFF CACHE BOOL "OpenCV Option:")
  set(BUILD_opencv_python2 OFF CACHE BOOL "OpenCV Option:")
  set(BUILD_opencv_world ON CACHE BOOL "OpenCV Option:")
  set(WITH_CUDA OFF CACHE BOOL "OpenCV Option:")
  set(WITH_CUFFT OFF CACHE BOOL "OpenCV Option:")
  set(WITH_GTK OFF CACHE BOOL "OpenCV Option:")
  set(WITH_IPP OFF CACHE BOOL "OpenCV Option:")
  set(WITH_IPP_A OFF CACHE BOOL "OpenCV Option:")
  set(WITH_MATLAB OFF CACHE BOOL "OpenCV Option:")
  set(WITH_QT OFF CACHE BOOL "OpenCV Option:")
  add_subdirectory(OpenCV)
#+END_SRC
** Cinder
Cinder has fewer configurations. I just add more verbose output for CMake (to see if anything is going wrong) and switch to using my system's ~libboost~. Cinder comes with some prebuilt older version of boost which has caused me problems in the past (maybe this will come back to bite me later b/c there must be a good reason for it being there that I'm missing.. but would it even work on another architecture like ARM?)
#+BEGIN_SRC cmake :tangle contrib/CMakeLists.txt
  set(CINDER_BOOST_USE_SYSTEM ON CACHE BOOL "Cinder Option:")
  set(CINDER_VERBOSE ON CACHE BOOL "Cinder Verbose output")
  add_subdirectory(Cinder)
#+END_SRC
** Cinder-Blocks
Cinder-Blocks aren't magical. They're simply other libraries with the added requirement that they link to Cinder. So you need to make sure to add them in CMake after you've added Cinder itself. To make sure I don't make a mistake, I put all the Cinder-Blocks in one subdirectory called ~Cinder-Blocks/~ 
#+BEGIN_SRC cmake :tangle contrib/CMakeLists.txt
  add_subdirectory(Cinder-Blocks)
#+END_SRC
** Adding Cinder-BLocks
Most Cinder-Blocks don't come with a CMakeLists.txt, so unfortunately adding them is a bit more of a manual process than a typical CMake library. The flip side is that they're usually pretty small and self contained. It should just be a few headers and a few cpp files. When adding the headers you'll note the ~PUBLIC~ keyword, which ensures those headers will be forwarded by any subsequent library or executable that tries to use this library in our CMake (ie. our executable in the root CMakeLists.txt)

To illustrate the process I've added ~Cinder-ImGui~ and ~Cinder-Asio~. Fundamentally it's very similar to what we've done with OpenCV and Cinder itself. You pull with git and then manually build the library. The extra step is then linking the block with cinder.
*** ImgGui
#+BEGIN_SRC cmake :tangle contrib/Cinder-Blocks/CMakeLists.txt
  execute_process(COMMAND git submodule update --recursive --init -- Cinder-ImGui
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

  add_library(Cinder-ImGui
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-ImGui/src/CinderImGui.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-ImGui/lib/imgui/imgui.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-ImGui/lib/imgui/imgui_demo.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-ImGui/lib/imgui/imgui_draw.cpp)
  target_include_directories(Cinder-ImGui PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-ImGui/include
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-ImGui/lib/imgui)

  target_link_libraries(Cinder-ImGui cinder)
#+END_SRC
~Cinder-ImGui~ itself has ~ImGui~ as a submodule, but we don't have to worry about that detail thanks to git's ~--recursive~ flag.
*** Asio
#+BEGIN_SRC cmake :tangle contrib/Cinder-Blocks/CMakeLists.txt
  execute_process(COMMAND git submodule update --recursive --init -- Cinder-Asio
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

  add_library(Cinder-Asio
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-Asio/src/ClientInterface.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-Asio/src/DispatcherInterface.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-Asio/src/ServerInterface.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-Asio/src/SessionInterface.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-Asio/src/TcpClient.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-Asio/src/TcpServer.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-Asio/src/TcpSession.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-Asio/src/UdpClient.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-Asio/src/UdpServer.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-Asio/src/UdpSession.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-Asio/src/WaitTimer.cpp)

  target_include_directories(Cinder-Asio PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/Cinder-Asio/src/)

  target_link_libraries(Cinder-Asio cinder)
#+END_SRC
Both here and in the previous example I simply made a list of all the ~.h~ and ~.cpp~ files and linked them. That's it!
* Finishing up the root CMakeLists.txt
Now that we have all the libraries and cinder blocks, we need to come back to the root CMakeLists.txt and make the executable from it's source files. And as a final step we simply link in all the libraries we just created
#+BEGIN_SRC cmake :tangle CMakeLists.txt
  add_executable(cinder-template 
    ${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp )
  target_link_libraries(cinder-template 
    opencv_world 
    cinder 
    Cinder-ImGui 
    Cinder-Asio)
#+END_SRC

Once you start to work further off the template you will want to add more source files and subsequently some additional headers. The ~.cpp~ files will go in to the list in ~add_executable(..)~ and the headers will go into a ~target_include_directories(..)~ like they did previously when making the Cinder-Blocks. Example:
#+BEGIN_SRC cmake
  add_executable(cinder-template 
    ${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/source0.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/source1.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/source2.cpp)
  target_link_libraries(cinder-template
    ${CMAKE_CURRENT_SOURCE_DIR}/src/header0.h
    ${CMAKE_CURRENT_SOURCE_DIR}/src/header1.h
    ${CMAKE_CURRENT_SOURCE_DIR}/src/header2.h)
  target_link_libraries(cinder-template 
    opencv_world 
    cinder 
    Cinder-ImGui 
    Cinder-Asio)
#+END_SRC
If you're wondering where the library headers are - they get automatically pulled in during the ~target_link_libraries(..)~ b/c they were declared as ~PUBLIC~ during that library's creation. This is CMake's way to say that they are required for using the library - and any object (library or executable) that links to it will automatically inherite those include paths

* Template main.cpp
Now that we have the build system setup I will just add a dummy skeleton ~main.cpp~. It just follows the normal structure you see in all the samples. However nothing in the build system precludes you from using Cinder as a 3rd party library like OpenCV - just the graphics pipeline will not be initialzied for you like in a Cinder app.
#+BEGIN_SRC cpp :tangle src/main.cpp
  #include <stdlib.h>

  #include "cinder/app/App.h"
  #include "cinder/app/RendererGl.h"
  #include "cinder/gl/gl.h"

  using namespace ci;
  using namespace ci::app;

  class Template : public App {
  public:
      void setup() override;
      void update() override;
      void draw() override;
      void cleanup() override;
      
  };

  void Template::setup()
  {
  }
  void Template::update()
  {
  }
  void Template::draw()
  {
  }
  void Template::cleanup()
  {
  }
  CINDER_APP( Template , RendererGl)
#+END_SRC
#+BEGIN_QUOTE
This webpage is generated from an org-document (at ~./index.org~) that also generates all the files described. 

Once opened in Emacs:\\
- ~C-c C-e h h~ generates the webpage  \\
- ~C-c C-v C-t~ exports the code blocks into the appropriate files\\
#+END_QUOTE
#+BEGIN_QUOTE
Addendum: As noted in the text. Generating the files from this org document is unfortunately not be sufficient b/c it will not add the submodules. So it you don't want to clone the repository directly and want to generate it from this document you will also need to manually add the submodules
#+END_QUOTE
